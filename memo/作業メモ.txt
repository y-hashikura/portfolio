※参考サイト
https://di-acc2.com/page/2/?s=Django

1. Djangoインストール
pip install Django

2. 仮想環境作成
python -m venv env

3. 仮想環境有効化
.\env\Scripts\activate

※エラーの場合、実行権限ポリシーを変更必要。通常のローカルのターミナルコマンドで下記実行。
実行権限ポリシーを変更
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
実行権限ポリシーをもとに戻す
Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope CurrentUser

4. 仮想環境上の依存関係を出力
pip freeze > requirements.txt

5. pythonのインタープリター選択
ctrl + shift + Pでコマンドパレットを開きinterを入力すればインタープリターの設定が出てくるので、
それを仮想環境上のpythonに指定する。


6. Djangoプロジェクト作成コマンド実行
django-admin startproject django_project

7. ローカルサーバーを起動して動作確認
cd django_project
python3 manage.py runserver

8. アプリケーションフォルダを作成
python3 manage.py startapp task_manager 

9. djangoプロジェクトにアプリケーションを認識される
INSTALLED_APPSの要素に値を追加
'task_manager'

10. アプリケーションフォルダ内のview定義
簡単なHellow Worldを出力するものを定義

11. アプリケーションフォルダ内のurls定義
アクセスされた際に紐づくurlsを定義

12. アプリケーション内に定義したurlsとマッピングするためにdjangoプロジェクト側のurlsとマッピング設定


13. デフォルト起動のパスを変更するように設定
djangoプロジェクト内にルートディレクトリにアクセスされたら、
task_managerのパスにリダイレクトされるように設定追加


14. テンプレートフォルダを作成
djangoプロジェクトフォルダ内直下とアプリケーションフォルダ内に作成。
意図としては、最終的に各種アプリケーションは同じ画面で管理しようと思っているけど
明確にわかりやすいようにわけたいから。

15. settings.py
APP_DIRSがTrueの場合、Djangoは各アプリケーションのtemplatesフォルダを自動で探してくれます。
これにより、アプリケーション内のtemplates/フォルダにテンプレートファイルを配置すると、そのまま使用できます。

templateとstaticフォルダの作成と配置。
それによるsetting.pyの設定

16. タスク新規登録用モデル作成
モデルを定義。
マイグレーションファイル作成。
マイグレーション実行
python manage.py makemigrations (アプリケーションフォルダ)

python manage.py migrate 


17. 管理画面に新規追加モデルを追加

18. フォームクラスの作成

19. テンプレート作成/ビュークラス作成
テンプレートのレンダリング処理を実装


class SkillRegisterForm(forms.ModelForm):
    """
    スキル登録フォームクラス
    """
    class Meta:
        model = SkillModel
        # フィールドをリスト形式で定義します
        fields = [
            field.name for field in model._meta.get_fields() 
            if field.concrete
        ]
        # フィールド名とverbose_nameを対応させる辞書を作成します
        labels = {
            field.name: field.verbose_name
            for field in model._meta.get_fields() 
            if field.concrete
        }
        